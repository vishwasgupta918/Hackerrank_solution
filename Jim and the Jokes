#include <assert.h>
#include <ctype.h>
#include <limits.h>
#include <math.h>
#include <stdbool.h>
#include <stddef.h>
#include <stdint.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

char* readline();
char* ltrim(char*);
char* rtrim(char*);
char** split_string(char*);

int parse_int(char*);

long long convert_to_base10(int num, int base) {
    if (base < 2) return -1;
    long long result = 0;
    char s[32];
    sprintf(s, "%d", num);              
    for (int i = 0; s[i]; i++) {
        int digit = s[i] - '0';
        if (digit < 0 || digit >= base) return -1;
        result = result * base + digit;
    }
    return result;
}

int cmp_ll(const void *a, const void *b) {
    long long va = *(const long long*)a;
    long long vb = *(const long long*)b;
    if (va < vb) return -1;
    if (va > vb) return 1;
    return 0;
}

int main() {
    FILE* fptr = fopen(getenv("OUTPUT_PATH"), "w");

    int n = parse_int(ltrim(rtrim(readline())));

    long long *values = malloc(n * sizeof(long long));
    int values_len = 0;

    for (int i = 0; i < n; i++) {
        char** parts = split_string(rtrim(readline()));
        int month = parse_int(parts[0]);
        int day   = parse_int(parts[1]);

        long long v = convert_to_base10(day, month);
        if (v != -1) {
            values[values_len++] = v;
        }
    }

    qsort(values, values_len, sizeof(long long), cmp_ll);

    long long ans = 0;
    int i = 0;
    while (i < values_len) {
        int j = i + 1;
        while (j < values_len && values[j] == values[i]) j++;
        long long freq = (long long)(j - i);
        ans += freq * (freq - 1) / 2;
        i = j;
    }

    fprintf(fptr, "%lld\n", ans);

    free(values);
    fclose(fptr);
    return 0;
}

/* --- helper functions (same scaffold) --- */

char* readline() {
    size_t alloc_length = 1024;
    size_t data_length = 0;
    char* data = malloc(alloc_length);

    while (1) {
        char* cursor = data + data_length;
        char* line = fgets(cursor, alloc_length - data_length, stdin);
        if (!line) break;
        data_length += strlen(cursor);
        if (data_length < alloc_length - 1 || data[data_length - 1] == '\n') break;
        alloc_length <<= 1;
        data = realloc(data, alloc_length);
    }

    if (data[data_length - 1] == '\n') {
        data[data_length - 1] = '\0';
        data = realloc(data, data_length);
    } else {
        data = realloc(data, data_length + 1);
        data[data_length] = '\0';
    }
    return data;
}

char* ltrim(char* str) {
    if (!str) return "\0";
    if (!*str) return str;
    while (*str != '\0' && isspace(*str)) str++;
    return str;
}

char* rtrim(char* str) {
    if (!str) return "\0";
    if (!*str) return str;
    char* end = str + strlen(str) - 1;
    while (end >= str && isspace(*end)) end--;
    *(end + 1) = '\0';
    return str;
}

char** split_string(char* str) {
    char** splits = NULL;
    char* token = strtok(str, " ");
    int spaces = 0;
    while (token) {
        splits = realloc(splits, sizeof(char*) * ++spaces);
        if (!splits) return splits;
        splits[spaces - 1] = token;
        token = strtok(NULL, " ");
    }
    return splits;
}

int parse_int(char* str) {
    char* endptr;
    int value = strtol(str, &endptr, 10);
    if (endptr == str || *endptr != '\0') exit(EXIT_FAILURE);
    return value;
}
