int compare(const void* a, const void* b) {
    long long x = *(const long long*)a;
    long long y = *(const long long*)b;
    if (x > y) return 1;
    if (x < y) return -1;
    return 0;
}

char* organizingContainers(int container_rows, int container_columns, int** container) {
    int n = container_rows; // n x n matrix
    long long* row_sums = malloc(n * sizeof(long long));
    long long* col_sums = malloc(n * sizeof(long long));

    for (int i = 0; i < n; i++) {
        row_sums[i] = 0;
        col_sums[i] = 0;
    }

    for (int i = 0; i < n; i++) {
        for (int j = 0; j < n; j++) {
            row_sums[i] += container[i][j];
            col_sums[j] += container[i][j];
        }
    }

    qsort(row_sums, n, sizeof(long long), compare);
    qsort(col_sums, n, sizeof(long long), compare);

    char* result = malloc(11 * sizeof(char));
    for (int i = 0; i < n; i++) {
        if (row_sums[i] != col_sums[i]) {
            strcpy(result, "Impossible");
            free(row_sums);
            free(col_sums);
            return result;
        }
    }

    strcpy(result, "Possible");
    free(row_sums);
    free(col_sums);
    return result;
}
