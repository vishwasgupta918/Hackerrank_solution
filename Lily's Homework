typedef struct {
    int value;
    int index; // original index in arr
} Pair;

int compareAsc(const void* a, const void* b) {
    const Pair* pa = (const Pair*)a;
    const Pair* pb = (const Pair*)b;
    if (pa->value < pb->value) return -1;
    if (pa->value > pb->value) return 1;
    return 0;
}

int compareDesc(const void* a, const void* b) {
    const Pair* pa = (const Pair*)a;
    const Pair* pb = (const Pair*)b;
    if (pa->value > pb->value) return -1;
    if (pa->value < pb->value) return 1;
    return 0;
}

int countSwaps(Pair* pairs, int n) {
    int* visited = calloc(n, sizeof(int));
    int swaps = 0;

    for (int i = 0; i < n; i++) {
        // If element is already visited or already in correct position
        if (visited[i] || pairs[i].index == i)
            continue;

        int cycleSize = 0;
        int j = i;
        while (!visited[j]) {
            visited[j] = 1;
            j = pairs[j].index;  // jump to original index of sorted element
            cycleSize++;
        }

        if (cycleSize > 0)
            swaps += (cycleSize - 1);
    }

    free(visited);
    return swaps;
}

int lilysHomework(int arr_count, int* arr) {
    Pair* asc = malloc(arr_count * sizeof(Pair));
    Pair* desc = malloc(arr_count * sizeof(Pair));

    for (int i = 0; i < arr_count; i++) {
        asc[i].value = arr[i];
        asc[i].index = i;
        desc[i].value = arr[i];
        desc[i].index = i;
    }

    qsort(asc, arr_count, sizeof(Pair), compareAsc);
    qsort(desc, arr_count, sizeof(Pair), compareDesc);

    int asc_swaps = countSwaps(asc, arr_count);
    int desc_swaps = countSwaps(desc, arr_count);

    free(asc);
    free(desc);

    return asc_swaps < desc_swaps ? asc_swaps : desc_swaps;
}
